from email import message
import logging
from subprocess import call  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ 
# Telegram 
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Text
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher import FSMContext
import datetime
from datetime import timedelta
# –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
import uuid

import os
# —Ç–æ–∫–µ–Ω –¥–ª—è –±–æ—Ç–∞ –≤ —Ñ–∞–π–ª–µ settings.py (–Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å)
from settings import TOKEN
#
from PPTX_GENERATOR import PPTX_GENERATOR
from PPTX_to_PDF import pptx_to_pdf
# –ë–î sqlite (—Ä–µ–∫–æ–º–µ–Ω–¥—É—é DB Browser) 
import sqlite3
from sqlite3.dbapi2 import Cursor

from string import Template

from morphy_using import name_change

from asgiref.sync import sync_to_async

API_TOKEN = TOKEN
user_name = ''
# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

mess = {}  #–¢—É—Ç –±—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –±–æ—Ç—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# —Ç–∞–∫ –¥–µ–ª–∞—Ç—å –ø–ª–æ—Ö–æ –∏ –ª—É—á—à–µ –ë–î –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –Ω–æ —Å–µ–π—á–∞—Å –ø–æ–π–¥—ë—Ç

# –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏–∑ –æ–±–Ω–æ–π –∫–Ω–æ–ø–∫–∏
keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
buttons = ["–•–æ—á—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç"]
keyboard.add(*buttons)

template_message_start = Template("–ü—Ä–∏–≤–µ—Ç, $name!\nüëãüèºüòÄ\n–Ø –ö–≤–∞–Ω—Ç–æ—à–∞, –±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç–Ω–æ–π –≥—Ä—É–ø–ø–æ–π –≤ IT –ö–≤–∞–Ω—Ç—É–º–µ, "\
		"–¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –æ –ø–æ—Å–µ—â–µ–Ω–∏–∏ –¥–Ω—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–≤–µ—Ä–µ–π\n–ù–∞–ø–∏—à–∏ –º–Ω–µ —Å–≤–æ–∏ –§–ò–û –∏ —è –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–µ–±–µ —Ç–≤–æ–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç")

class Form(StatesGroup):
	waiting_for_your_name = State()
	waiting_for_your_correct_name = State()

@dp.message_handler(commands=['start', 'help', '–Ω–∞—á–∞—Ç—å', '—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç'])
async def send_welcome(message: types.Message):
	message_start = template_message_start.substitute(name=message.from_user.first_name)
	await message.reply(message_start, reply_markup=keyboard)

# –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
@dp.message_handler(Text(equals=['start', 'help', '–Ω–∞—á–∞—Ç—å', '—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç']))
async def send_welcome(message: types.Message):
	message_start = template_message_start.substitute(name=message.from_user.first_name)
	await message.reply(message_start, reply_markup=keyboard)

@dp.message_handler(Text(equals="–•–æ—á—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç"))
async def certificate(message: types.Message):
	await message.answer("–ù–∞–ø–∏—à–∏ –º–Ω–µ —Å–≤–æ–∏ –§–ò–û", reply_markup=keyboard)
	await Form.waiting_for_your_name.set()
	@dp.message_handler(state=Form.waiting_for_your_name)
	async def main_function(message: types.Message, state: FSMContext):
		await state.update_data(name=message.text)
		await message.answer("–¢–≤–æ–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–æ–∑–¥–∞—ë—Ç—Å—è, –ø–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ")
		user_name = name_change(message.text)
		inline_btn_yes = InlineKeyboardButton('–î–∞', callback_data='–î–∞')
		inline_btn_no = InlineKeyboardButton('–ù–µ—Ç', callback_data='–ù–µ—Ç')
		inline_kb = InlineKeyboardMarkup().add(inline_btn_yes, inline_btn_no)
		await message.reply(Template("–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω $cased_name\n–í—Å–µ –ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ?").substitute(cased_name=user_name), reply_markup=inline_kb)
		await state.finish()
		@dp.callback_query_handler(lambda c: c.data == '–î–∞')
		async def create(callback_query: types.CallbackQuery):
			#  "–≥–µ–Ω–∏–∞–ª—å–Ω—ã–π" –∞–Ω—Ç–∏ DDoS
			can_receive_message = 1
			# if message.from_user.id not in mess: #–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–∏—Å–∞–ª –µ—â—ë —Å–æ–æ–±—â–µ–Ω–∏—è, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ ID –≤ —Å–ª–æ–≤–∞—Ä—å –∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –≤—Ä–µ–º—è
			# 	mess[message.from_user.id] = datetime.datetime.now()
			# elif (datetime.datetime.now() - mess[message.from_user.id]).total_seconds() < 15:  # –°—Ç–∞–≤–∏–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç—É
			# 	await message.answer('–ú–Ω–µ –º–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å –Ω–µ —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ 15 —Å–µ–∫—É–Ω–¥\n‡≤•_‡≤•\n–¢–µ–±–µ –ø—Ä–∏–¥—ë—Ç—Å—è –ø–æ–¥–æ–∂–¥–∞—Ç—å')
			# 	can_receive_message = 0
			if can_receive_message:
				user_name = name_change(message.text)
				# —Ñ–æ—Ä–º–∏—Ä—É–µ–º –¥–∞—Ç—É: –¥–¥-–º–º-–≥–≥–≥–≥
				today_date = "{:02d}".format(datetime.date.today().day)  # —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ - –≤—Å–µ–≥–¥–∞ –∏–∑ –¥–≤—É—Ö —á–∏—Å–ª–µ  
				today_date += "-" + "{:02d}".format(datetime.date.today().month)
				today_date += "-" + str(datetime.date.today().year)
				UID = uuid.uuid4().hex #—É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è ID —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
				file = await sync_to_async(PPTX_GENERATOR)(user_name, UID, today_date)  # —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ pptx –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ —à–∞–±–ª–æ–Ω–∞ (–§–ò–û, ID, –¥–∞—Ç–∞)
				# file - –§–ò–û+ID:  –ö–∞—Å—Ç—Ä—é–ª–µ–≤ –ï–≤–ª–∞–º–ø–∏–π –°–ø–∏—Ä–∏–¥–æ–Ω–æ–≤–∏—á_ID 
				pptx_to_pdf(file, today_date)

				doc = open('./GENERATED_PDF/' + today_date + '/' + file + ".pdf", 'rb')  # –±–µ—Ä—ë–º —Ñ–∞–π–ª
				await bot.answer_callback_query(callback_query.id)
				await bot.send_document(callback_query.from_user.id, doc)  # –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
				doc.close() # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª

				# —Ä–∞–±–æ—Ç–∞ —Å SQLLite
				connect = sqlite3.connect('users.db')
				cursor = connect.cursor()
				cursor.execute("""CREATE TABLE IF NOT EXISTS users(
						user_id TEXT PRIMARY KEY,
						user_name TEXT,
						date TEXT,
						time TEXT,
						source TEXT,
						uname_source TEXT,
						uid_source TEXT
						)
						""")	

				now_time = datetime.datetime.now()
				users_list = [UID, user_name, today_date, now_time.strftime("%H:%M:%S"), "Telegram", callback_query.from_user.username, callback_query.from_user.id]
				cursor.execute("INSERT INTO users VALUES(?,?,?,?,?,?,?);", users_list)
				connect.commit()

		@dp.callback_query_handler(lambda c: c.data == '–ù–µ—Ç')
		async def create_with_user_name(callback_query: types.CallbackQuery, state: FSMContext):
			await bot.answer_callback_query(callback_query.id)
			await bot.send_message(callback_query.from_user.id, "–ö–∞–∫ –±—É–¥–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ?")
			await Form.waiting_for_your_correct_name.set()
			@dp.message_handler(state=Form.waiting_for_your_correct_name)
			async def another_main_function(message_1: types.Message):
				global mess  # –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –±–æ—Ç—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–ª–æ–≤–∞—Ä—å)
				await state.update_data(correct_name=message_1.text)
				#  "–≥–µ–Ω–∏–π–∞–ª—å–Ω—ã–π" –∞–Ω—Ç–∏ DDoS
				can_receive_message = 1
				# if message.from_user.id not in mess: #–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–∏—Å–∞–ª –µ—â—ë —Å–æ–æ–±—â–µ–Ω–∏—è, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ ID –≤ —Å–ª–æ–≤–∞—Ä—å –∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –≤—Ä–µ–º—è
				# 	mess[message.from_user.id] = datetime.datetime.now()
				# elif (datetime.datetime.now() - mess[message.from_user.id]).total_seconds() < 15:  # –°—Ç–∞–≤–∏–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç—É
				# 	await message.answer('–ú–Ω–µ –º–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å –Ω–µ —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ 15 —Å–µ–∫—É–Ω–¥\n‡≤•_‡≤•\n–¢–µ–±–µ –ø—Ä–∏–¥—ë—Ç—Å—è –ø–æ–¥–æ–∂–¥–∞—Ç—å')
				# 	can_receive_message = 0
				if can_receive_message:
					# —Ñ–æ—Ä–º–∏—Ä—É–µ–º –¥–∞—Ç—É: –¥–¥-–º–º-–≥–≥–≥–≥
					today_date = "{:02d}".format(datetime.date.today().day)  # —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ - –≤—Å–µ–≥–¥–∞ –∏–∑ –¥–≤—É—Ö —á–∏—Å–ª–µ  
					today_date += "-" + "{:02d}".format(datetime.date.today().month)
					today_date += "-" + str(datetime.date.today().year)
					UID = uuid.uuid4().hex #—É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è ID —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
					file = await sync_to_async(PPTX_GENERATOR)(message_1.text, UID, today_date)  # —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ pptx –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ —à–∞–±–ª–æ–Ω–∞ (–§–ò–û, ID, –¥–∞—Ç–∞)
					# file - –§–ò–û+ID:  –ö–∞—Å—Ç—Ä—é–ª–µ–≤ –ï–≤–ª–∞–º–ø–∏–π –°–ø–∏—Ä–∏–¥–æ–Ω–æ–≤–∏—á_ID 
					pptx_to_pdf(file, today_date)

					doc = open('./GENERATED_PDF/' + today_date + '/' + file + ".pdf", 'rb')  # –±–µ—Ä—ë–º —Ñ–∞–π–ª
					await message_1.answer_document(document=doc)  # –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

					# —Ä–∞–±–æ—Ç–∞ —Å SQLLite
					connect = sqlite3.connect('users.db')
					cursor = connect.cursor()
					cursor.execute("""CREATE TABLE IF NOT EXISTS users(
							user_id TEXT PRIMARY KEY,
							user_name TEXT,
							date TEXT,
							time TEXT,
							source TEXT,
							uname_source TEXT,
							uid_source TEXT
							)
							""")	

					now_time = datetime.datetime.now()
					users_list = [UID, user_name, today_date, now_time.strftime("%H:%M:%S"), "Telegram", message.from_user.username, message.from_user.id]
					cursor.execute("INSERT INTO users VALUES(?,?,?,?,?,?,?);", users_list)
					connect.commit()
					await state.finish()

if __name__ == '__main__':
	while True:
		try:
			executor.start_polling(dp, skip_updates=True)
		except Exception as e:
			print(e)
    
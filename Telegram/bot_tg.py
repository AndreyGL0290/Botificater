# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
import logging

# Telegram 
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Text
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher import FSMContext

# –†–∞–±–æ—Ç–∞ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º
import datetime

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
import uuid

# –¢–æ–∫–µ–Ω –¥–ª—è –±–æ—Ç–∞ –≤ —Ñ–∞–π–ª–µ settings.py (–Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å)
from settings import TOKEN

# –ù–∞—à–∏ –ø–∞–∫–µ—Ç—ã
from PPTX_GENERATOR import PPTX_GENERATOR
from morphy_using import name_change
from PPTX_to_PDF import pptx_to_pdf

# –ë–î sqlite (—Ä–µ–∫–æ–º–µ–Ω–¥—É—é DB Browser) 
import sqlite3

# –†–∞–±–æ—Ç–∞ —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏
from string import Template

# –†–∞–±–æ—Ç–∞ —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å—é
from asgiref.sync import sync_to_async

# –¢–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –±–µ—Ä–µ—Ç—Å—è –∏–∑ settings.py (–¥–∞–µ—Ç—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–æ—Ç–∞ –≤ BotFather)
API_TOKEN = TOKEN

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

mess = {}  # –¢—É—Ç –±—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –±–æ—Ç—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# –¢–∞–∫ –¥–µ–ª–∞—Ç—å –ø–ª–æ—Ö–æ –∏ –ª—É—á—à–µ –ë–î –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –Ω–æ —Å–µ–π—á–∞—Å –ø–æ–π–¥—ë—Ç

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏–∑ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–∏
keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
buttons = ["–•–æ—á—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç"]
keyboard.add(*buttons)

template_message_start = Template("–ü—Ä–∏–≤–µ—Ç, $name!\nüëãüèºüòÄ\n–Ø –ö–≤–∞–Ω—Ç–æ—à–∞, –±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç–Ω–æ–π –≥—Ä—É–ø–ø–æ–π –≤ IT –ö–≤–∞–Ω—Ç—É–º–µ, "\
		"–¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –æ –ø–æ—Å–µ—â–µ–Ω–∏–∏ –¥–Ω—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–≤–µ—Ä–µ–π\n–ù–∞–ø–∏—à–∏ –º–Ω–µ —Å–≤–æ–∏ –§–ò–û –∏ —è –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–µ–±–µ —Ç–≤–æ–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç")

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
class Form(StatesGroup):
	waiting_for_your_name = State()

@dp.message_handler(commands=['start', 'help', '–Ω–∞—á–∞—Ç—å', '—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç'])
async def send_welcome(message: types.Message):
	message_start = template_message_start.substitute(name=message.from_user.first_name)
	await message.reply(message_start, reply_markup=keyboard)

# –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
@dp.message_handler(Text(equals=['start', 'help', '–Ω–∞—á–∞—Ç—å', '—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç']))
async def send_welcome(message: types.Message):
	message_start = template_message_start.substitute(name=message.from_user.first_name)
	await message.reply(message_start, reply_markup=keyboard)

@dp.message_handler(Text(equals="–•–æ—á—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç"))
async def certificate(message: types.Message, state: FSMContext):
	await message.answer("–ù–∞–ø–∏—à–∏ –º–Ω–µ —Å–≤–æ–∏ –§–ò–û", reply_markup=keyboard)
	await state.update_data(cased=False)
	await Form.waiting_for_your_name.set()

# –û—Ç—Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(state=Form.waiting_for_your_name)
async def enter_your_name(message: types.Message, state: FSMContext):
	cased_user_name = message.text
	# –ï—Å–ª–∏ –∏–º—è —á–µ–ª–æ–≤–µ–∫–∞ –ø—Ä–æ—Å–∫–ª–æ–Ω—è–ª–æ—Å—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏ –æ–Ω –Ω–∞–∂–∞–ª –ù–ï–¢
	data = await state.get_data()
	is_cased = data['cased']
	if not is_cased:
		cased_user_name = name_change(message.text)
	
	# –ó–∞–Ω–æ—Å–∏–º —Å–∫–ª–æ–Ω–µ–Ω–Ω–æ–µ –∏–º—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —ç—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
	await state.update_data(name=cased_user_name)
	inline_btn_yes = InlineKeyboardButton('–î–∞', callback_data='–î–∞')
	inline_btn_no = InlineKeyboardButton('–ù–µ—Ç', callback_data='–ù–µ—Ç')
	inline_kb = InlineKeyboardMarkup().add(inline_btn_yes, inline_btn_no)
	await message.answer(f"–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω {cased_user_name}\n–í—Å—ë –ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ?", reply_markup=inline_kb)

# –ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ —Å–∫–∞–∂–µ—Ç —á—Ç–æ —Ñ–∞–º–∏–ª–∏—è –ø—Ä–æ—Å–∫–ª–æ–Ω—è–ª–∞—Å—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ
@dp.callback_query_handler(lambda c: c.data == "–î–∞", state=Form.waiting_for_your_name)
async def user_answered_yes(callback_query: types.CallbackQuery, state: FSMContext):
	# –°–¥–µ–ª–∞—Ç—å –∞–Ω—Ç–∏ DDOS
	await bot.answer_callback_query(callback_query.id)
	await main_algorithm(state, callback_query)

# –ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ —Å–∫–∞–∂–µ—Ç, —á—Ç–æ —Ñ–∞–º–∏–ª–∏—è –ø—Ä–æ—Å–∫–ª–æ–Ω—è–ª–∞—Å—å –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
@dp.callback_query_handler(lambda c: c.data == "–ù–µ—Ç", state=Form.waiting_for_your_name)
async def user_answered_no(callback_query: types.CallbackQuery, state: FSMContext):
	await bot.answer_callback_query(callback_query.id)
	await bot.send_message(callback_query.from_user.id, "–ö–∞–∫ –±—É–¥–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ?")
	await state.update_data(cased=True)
	await Form.waiting_for_your_name.set()

async def main_algorithm(state, instance):
	# –ï—Å–ª–∏ –ø–µ—Ä–µ—à–ª–∏ –≤ –∞–ª–≥–æ—Ä–∏—Ç–º –∏–∑ –≤–µ—Ç–∫–∏ –î–ê
	try:
		data = await state.get_data()
		user_name = data["name"]
	# –ï—Å–ª–∏ –ø–µ—Ä–µ—à–ª–∏ –≤ –∞–ª–≥–æ—Ä–∏—Ç–º –∏–∑ –≤–µ—Ç–∫–∏ –ù–ï–¢
	except KeyError:
		user_name = instance.text

	today_date = "{:02d}".format(datetime.date.today().day)  # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ - –≤—Å–µ–≥–¥–∞ –∏–∑ –¥–≤—É—Ö —á–∏—Å–ª–µ  
	today_date += "-" + "{:02d}".format(datetime.date.today().month)
	today_date += "-" + str(datetime.date.today().year)

	UID = uuid.uuid4().hex # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è ID —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞

	file = await sync_to_async(PPTX_GENERATOR)(user_name, UID, today_date)  # –§—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ pptx –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ —à–∞–±–ª–æ–Ω–∞ (–§–ò–û, ID, –¥–∞—Ç–∞)

	pptx_to_pdf(file, today_date)

	with open('./GENERATED_PDF/' + today_date + '/' + file + ".pdf", 'rb') as doc: # –ë–µ—Ä—ë–º —Ñ–∞–π–ª
		# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –∏–∑ –≤–µ—Ç–∫–∏ –î–ê
		if type(instance) == types.CallbackQuery:
			await bot.answer_callback_query(instance.id)
			await bot.send_document(instance.from_user.id, doc) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
		# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –∏–∑ –≤–µ—Ç–∫–∏ –ù–ï–¢
		else:
			await instance.answer_document(document=doc) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

	# –†–∞–±–æ—Ç–∞ —Å –ë–î
	connect = sqlite3.connect('users.db')
	cursor = connect.cursor()
	cursor.execute("""CREATE TABLE IF NOT EXISTS users(
			user_id TEXT PRIMARY KEY,
			user_name TEXT,
			date TEXT,
			time TEXT,
			source TEXT,
			uname_source TEXT,
			uid_source TEXT
			)
			""")	
	now_time = datetime.datetime.now()
	users_list = [UID, user_name, today_date, now_time.strftime("%H:%M:%S"), "Telegram", instance.from_user.username, instance.from_user.id]
	cursor.execute("INSERT INTO users VALUES(?,?,?,?,?,?,?);", users_list)
	connect.commit()

	# –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
	await state.finish()

if __name__ == '__main__':
	while True:
		try:
			executor.start_polling(dp, skip_updates=True)
		except Exception as e:
			print(e)
    